{"version":3,"sources":["serviceWorker.ts","components/WorkshopForm.tsx","pages/Toolpage.tsx","components/NavBar.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Wrapper","styled","UploadDiv","UploadInput","UploadWarning","Separator","SeriesInputDiv","SeriesTitle","Series","SeriesLabel","SeriesNumInput","ButtonDiv","Plus","FaPlusCircle","Minus","FaMinusCircle","SubmitButton","WorkshopForm","props","series","renderseries","bind","updateSeries","addSeries","deleteSeries","storeFile","parseAndSend","setMatches","this","setState","numSeries","PrefFile","e","target","dataset","id","parseInt","value","console","log","state","push","pop","i","type","min","max","data-id","onChange","files","matches","reader","FileReader","arr","set","onload","result","toString","replace","split","EOL","map","row","fetch","method","headers","body","JSON","stringify","rows","workshopsToAttend","then","response","readAsBinaryString","accept","required","onClick","React","Component","PageWrapper","Header","Toolpage","NavWrapper","Item","Link","ItemName","Navbar","to","ReactDOM","render","exact","path","component","ToolPage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aefb9c7e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FaPlusCircle, FaMinusCircle } from \"react-icons/fa\";\nimport { EOL } from \"os\";\n\nconst Wrapper = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  border: black solid 2px;\n  padding: 2vw;\n  font-family: \"Montserrat\", sans-serif;\n  width: 40%;\n`;\n\nconst UploadDiv = styled(\"div\")`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst UploadInput = styled(\"input\")``;\n\nconst UploadWarning = styled(\"p\")`\n  font-size: 1vw;\n  margin-right: 2vw;\n`;\n\nconst Separator = styled(\"hr\")`\n  color: black;\n  width: 100%;\n`;\n\nconst SeriesInputDiv = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst SeriesTitle = styled(\"p\")``;\n\nconst Series = styled(\"div\")`\n  display: flex;\n  margin-bottom: 1vh;\n  justify-content: space-between;\n  width: 25%;\n`;\n\nconst SeriesLabel = styled(\"p\")`\n  font-size: 1vw;\n  margin: auto 0px;\n`;\n\nconst SeriesNumInput = styled(\"input\")`\n  line-height: 1;\n`;\n\nconst ButtonDiv = styled(\"div\")`\n  display: flex;\n  width: 100%;\n  margin-bottom: 2vh;\n`;\n\nconst Plus = styled(FaPlusCircle)`\n  height: 1.6em;\n  width: 1.6em;\n  cursor: pointer;\n  &:hover {\n    color: #00b4f5;\n  }\n`;\n\nconst Minus = styled(FaMinusCircle)`\n  height: 1.6em;\n  width: 1.6em;\n  margin-right: 10px;\n  cursor: pointer;\n  &:hover {\n    color: #00b4f5;\n  }\n`;\n\nconst SubmitButton = styled(\"div\")`\n  margin-top: 3vh;\n  border: black 1.5px solid;\n  text-align: center;\n  padding: 1vh 1vw;\n  width: 30%;\n  align-self: center;\n  cursor: pointer;\n  transition: 0.1s;\n  &:hover {\n    border: #00b4f5 1.5px solid;\n    color: #00b4f5;\n  }\n`;\n\nexport default class WorkshopForm extends React.Component<\n  {},\n  { numSeries: number; PrefFile: any; matches: any }\n> {\n  constructor(props) {\n    super(props);\n    this.renderseries = this.renderseries.bind(this);\n    this.updateSeries = this.updateSeries.bind(this);\n    this.addSeries = this.addSeries.bind(this);\n    this.deleteSeries = this.deleteSeries.bind(this);\n    this.storeFile = this.storeFile.bind(this);\n    this.parseAndSend = this.parseAndSend.bind(this);\n    this.setMatches = this.setMatches.bind(this);\n  }\n\n  series = [1];\n\n  componentWillMount() {\n    this.setState({\n      numSeries: 1,\n      PrefFile: null\n    });\n  }\n\n  updateSeries(e) {\n    this.series[e.target.dataset.id] = parseInt(e.target.value);\n    console.log(this.series);\n  }\n\n  addSeries() {\n    this.setState({\n      numSeries: this.state.numSeries + 1\n    });\n    this.series.push(1);\n  }\n\n  deleteSeries() {\n    if (this.state.numSeries === 1) return;\n    this.setState({\n      numSeries: this.state.numSeries - 1\n    });\n    this.series.pop();\n  }\n\n  renderseries() {\n    let series = [];\n    for (let i = 0; i < this.state.numSeries; i++) {\n      series.push(\n        <Series>\n          <SeriesLabel>Series {i + 1}</SeriesLabel>\n          <SeriesNumInput\n            type=\"number\"\n            min=\"1\"\n            max=\"100000\"\n            data-id={i}\n            onChange={this.updateSeries}\n          ></SeriesNumInput>\n        </Series>\n      );\n    }\n    return series;\n  }\n\n  storeFile(e) {\n    this.setState({\n      PrefFile: e.target.files[0]\n    });\n  }\n\n  setMatches(matches) {\n    this.setState({\n      matches: matches\n    });\n  }\n\n  parseAndSend() {\n    let reader = new FileReader();\n    let arr = this.series;\n    let set = this.setMatches;\n\n    reader.onload = function() {\n      console.log(\n        reader.result\n          .toString()\n          .replace(/['\"]+/g, \"\")\n          .split(\"\\r\" + EOL)\n          .map(row => row.split(\",\"))\n      );\n      fetch(\"https://thenry3.pythonanywhere.com/api/sort\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          rows: reader.result\n            .toString()\n            .replace(/['\"]+/g, \"\")\n            .split(\"\\r\" + EOL)\n            .map(row => row.split(\",\")),\n          workshopsToAttend: arr\n        })\n      }).then(response => {\n        console.log(response);\n        set(response);\n      });\n    };\n    reader.readAsBinaryString(this.state.PrefFile);\n  }\n\n  render() {\n    if (this.state.matches) return <p>YAY</p>;\n    return (\n      <>\n        <Wrapper>\n          <UploadDiv>\n            <UploadWarning>\n              File uploaded <strong>MUST</strong> be in CSV format\n            </UploadWarning>\n            <UploadInput\n              type=\"file\"\n              accept=\".csv\"\n              required\n              onChange={this.storeFile}\n            ></UploadInput>\n          </UploadDiv>\n          <Separator></Separator>\n          <SeriesInputDiv>\n            <SeriesTitle>\n              Input the number of workshops that students will be attending for\n              each series\n            </SeriesTitle>\n            <ButtonDiv>\n              <Minus onClick={this.deleteSeries} />\n              <Plus onClick={this.addSeries} />\n            </ButtonDiv>\n            {this.renderseries()}\n          </SeriesInputDiv>\n          <SubmitButton onClick={this.parseAndSend}>Submit</SubmitButton>\n        </Wrapper>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport WorkshopForm from \"../components/WorkshopForm\";\n\nconst PageWrapper = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-family: \"Montserrat\", sans-serif;\n`;\n\nconst Header = styled(\"p\")`\n  font-size: 3vw;\n  font-weight: bold;\n`;\n\nexport default class Toolpage extends React.Component {\n  render() {\n    return (\n      <>\n        <PageWrapper>\n          <Header>wow ty for using my shit</Header>\n          <WorkshopForm></WorkshopForm>\n        </PageWrapper>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst NavWrapper = styled(\"div\")`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst Item = styled(Link)`\n  font-family: \"Montserrat\", sans-serif;\n  font-size: 1.1vw;\n  letter-spacing: 0.1em;\n  color: black;\n  text-decoration: none;\n`;\n\nconst ItemName = styled(\"p\")`\n  margin: auto 1vw;\n  padding: 4vh 2vw;\n  ${Item}:hover & {\n    color: #00b4f5;\n    border-bottom: solid #00b4f5 1px;\n    padding-bottom: 3vh;\n  }\n`;\n\nexport default class Navbar extends React.Component {\n  render() {\n    return (\n      <>\n        <NavWrapper>\n          <Item to=\"/\">\n            <ItemName>Tool</ItemName>\n          </Item>\n          <Item to=\"/guidelines\">\n            <ItemName>Guidelines</ItemName>\n          </Item>\n          <Item to=\"/about\">\n            <ItemName>About</ItemName>\n          </Item>\n        </NavWrapper>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Route } from \"react-router\";\n\nimport ToolPage from \"./pages/Toolpage\";\nimport NavBar from \"./components/NavBar\";\n\nReactDOM.render(\n  <>\n    <Router>\n      <NavBar />\n      <Route exact path=\"/\" component={ToolPage}></Route>\n    </Router>\n  </>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}